=head1 NAME

ichabod

=head1 OPTIONS

ichabod does not take any options or arguments, just the script file you
would like to execute.

=head1 SYNOPSIS

ichabod runs Qt Script files that allow you to automate
multiple headless webkit browsers.

C<
var view = Factory.GetTestView();
view.CreateView();
view.Show();
view.Load("http://localhost:3000");
view.FinishedLoadingSignal.connect(function (str) {
  print("Finished Loading");
  var el = view.GetElement("#id-of-element");
  print(dump(el));
  view.MouseDown(el);
});
>

=head1 DESCRIPTION

ichabod is a C++ application that loads a QtScript(Javascript) control file
that expresses a test of a website or webpage. Practically all necessary
web actions are supported, clicking links, filling out forms, downloading
files, testing sqlite and localstore, turning caching on/off, turning
cookies on/off, mimicking other browsers via the user agent to verify
different content is sent.

You can interface directly with the Webviews(Hessians) and Webpages via their
documented public interfaces (See QtWebkit docs), or you can
use the prefab helper objects C<new Hessian("MyHessian");> or you can
use one of the specialized Hessians like C<new iPhone5();> you can
view libs/ scripts to find out what else is there.

=head1 C<State Machines>

Unlike many frameworks, ichabod is all about black box testing. You visit pages
and ensure that text and elements are present. You have no other way of knowing
about success. This is usually accomplished by writing your test as a State Machine.

You can't just login, or bypass forms, you have to simulate all user actions directly.
There are some examples online for how you can go about doing this. Depending on the
complexity of your app, these can get quite large. It is possible to C<include("file.js");>
similar to how nodejs does it, you will have access to C<env> variable and you
can attach your objects there. C<include> essentially reads your file from disk
and calls eval on it.

=head1 C<Why Bother?>

You will need to performance test your application and simulate real loads. ichabod
allows you to do that, once you create a test, you can run it on hundreds of headless
browsers simultaneously, from a single machine, or multiple machines.

Most testing frameworks work by using ridiculously simple and clean datasets,
going test by test and succeeding or failing, then resetting the database
into a pristine and sane configuration. Wanna know what will happend if you
don't roll your logs after a week of hard use? How about simulating it by 
running ichabod against your test server for a whole week, simulating thousands of 
transactions all occurring simultaneously?

=head1 AUTHOR

Jason Martin <jason@jason-knight-martin.com>

=cut
